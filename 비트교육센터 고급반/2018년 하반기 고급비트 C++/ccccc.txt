C++ . 레퍼런스 - 참조 할 시 변경할 수 없음 / 매크로와 const를 합쳐놓음
    .  nickname 
	   선언과 동시에 닉을 부여한다.
	   이유는 한번 참조하면 바꿀수 없기 때문
& -> 변수의 주소
* -> 그 주소에 있는 값을 이용

명시적 - 기능과 데이터 타입이 달라짐
암시적 - 기능은 똑같고 데이터 값만 바꿀수가 있음.

암시적 오버로딩 ( 디폴트 인자값(초기화값) = 사용자가 값을 안주면 기본 인자값으로 사용 )

디폴트 인자값을 준 기준으로 뒤에 있는 매개변수는
무조건 초기화를 해주어야 한다.

디폴트 인자값준 횟수 + 1개 만큼 호출가능
함수선언부에 디폴트 인자값을 사용하고
함수정의부에는 사용을 하면 안된다.

void out(int a = 0, int b = 0); // 이러한 함수 문법을 암시적 오버로딩 이라함.
out(10, 20); / 10 20
out(10); / 10 0
out(); / 0 0

void output(int a = 0, int b = 0, int c = 0); // 함수선언
void output(int a = 0, int b = 0, int c = 0) // 함수정의
{
	cout << a << b << c << endl;
}


접근 지정자
	1. private : 외부에서 접근 불가능
				 단, friend는 접근 가능
	2. default(자바)
	3. protected : 상속받은 외부에서만 접근 가능
	4. public : 아무나 접근 가능


	클래스의 구성요소
	1. 멤버변수, 필드 : 주로 private
		
	2. 생성자 함수 (디폴트) : public  // 클래스 이름과 같은 이름
		1) 기능 : 객체등록, 필드초기화
		2) 오버로딩이 가능(명시 암시 둘다 가능)
		3) const memner function로 만들 수 없다.  / const 값 고정 / 파이널 메소드 오버라이딩 금지
		4) 디폴트 생성자를 명시적으로 구현할 경우
		   디폴트 생성자는 사라진다.
		5) 객체 생성시 자동호출되어진다

	3. 멤버함수, 메소드 : public   // 외부함수와 내부함수를 이어주게함
		: 외부에서 필드를 사용하게 하기 위한 기능

	4. 복사생성자 (디폴트)

	5. 소멸자 (디폴트)
		: 객체 소멸시 자동호출되어진다.
		: 객체 등록 해제
		: 객체 소멸시 객체 잔여 메모리 정리
		: 생성자와 동일하지만 함수명앞에 ~(틸드)가 붙는다.
		: 오버로딩이 불가능하다.
		: const member function로 만들 수 없다.
		: virtual 함수로 꼭 만들어서 사용해라. (동적바인딩을 위해서)

	6. 대입연산자함수 (디폴트)

	2,4,5,6번은 default로 존재하기 때문에 항상 존재함

this pointer
	: 메소드의 첫번째 매개변수로 선언

// class 는 디폴트 시 private 으로 메인함수에 접근할 수 없음
// 디폴트 생성자