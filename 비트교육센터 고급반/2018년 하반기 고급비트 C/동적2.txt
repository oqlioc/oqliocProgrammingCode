#include<stdio.h>
#pragma warning(disable : 4996);
void input(int *clas, char *pname, int *pscore);
void oper(int *pscore, float *pavg);
void output(int *clas, char*pname, int *pscore, float *pavg);
void main() {

 int clas[3] = {0,};
 char name[3][3][10];
 int score[3][3][4] = {0,};
 float avg[3][3] = {0,};

 input(clas, **name, **score);        // 1차원 주소로 맞추기
 oper(**score, *avg);
 output(clas, **name, **score, *avg);


}

void input(int *clas, char *pname, int *pscore) {

 int i, j, k;

 for (k = 0 ; k<3 ; k++) {
  printf("Class number:");
  scanf("%d", clas + k);
 
  for (i = 0; i<3 ; i++) {
   printf("Name input : ");
   scanf("%s",(pname + k * 30) + (i * 10));
   
   for (j = 0 ; j<3 ; j++) {
    printf("Score input :");
    scanf("%d", ((pscore + k * 12) + (i * 4)) + j);
     
   }
  }
 }
}

void oper(int *pscore, float *pavg) {
 int i, j, k;

 for (k = 0; k<3; k++) {
  for (i = 0; i<3; i++) {
   for (j = 0; j<3; j++) {
    *(((pscore + k * 12) + i * 4) + 3) += *(((pscore + k * 12) + i * 4) + j);
   }
   *((pavg + k * 3) + i   ) = *(((pscore + k * 12) + i * 4) + 3) / 3.f;
  }
 }
}

void output(int *clas, char*pname, int *pscore, float *pavg) {
 int i, j, k;

 for (k = 0; k<3; k++) {
  printf("%d\n", *(clas + k));

  for (i = 0; i<3; i++) {
   printf("%s\t",( pname + k * 30 )+ i * 10);

   for (j = 0; j<4; j++) {
    printf("%d\t", *(((pscore + k * 12) + i * 4) + j));
   }
   printf("%f\n", *(pavg + k * 3) + i);
  }
 }




}




-----

#include<stdio.h>
#include<stdlib.h>
#pragma warning (disable:4996)
void memoryalloc(int **pp);
void input(int*p);
void output(int*p);
void del(int*p);
void main()
{
 int *p;
 
 memoryalloc(&p);      // 포인터의 주소를 넘겨주기
 input(p);    
 output(p);    
 del(p);

    

}


void memoryalloc(int**pp)
{

 *pp=(int*)calloc(1,sizeof(int));
}


void input(int*p)
{
 printf("숫자를 입력하시오.(입력함수)\n");
 scanf("%d",p); 

}


void output(int*p)
{
 printf("입력한 숫자가 나옵니다.(출력함수)\n"); 
 printf("%d\n", *p);

}


void del(int*p)
{
 free(p);
}

  

/*

동적메모리 할당 함수로 void 함수를 썼기 때문에 return을 하지 않는다. 대신 다차원포인터(더블포인터)사용 해서 포인터가 동적메모리를 계속 잡고 있는다.  

*/  


