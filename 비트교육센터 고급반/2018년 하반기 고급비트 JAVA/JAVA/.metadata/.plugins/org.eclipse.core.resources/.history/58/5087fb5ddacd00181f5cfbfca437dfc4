package adapterpattern;

interface Chicken
{
	public void getMeat();
	public void getName();
	public int getWeight();
}

interface Pigeon 
{
	public void getName();
	public int getWeight();
}

class KoreanChicken implements Chicken
{
	int weight;
	
	public KoreanChicken(int weight) 
	{
		this.weight = weight;
	}
	
	@Override
	public void getMeat()
	{
		int gd = 0;
		
		switch(weight/10)
		{
			case 3: gd = 3;
			break;
			case 4: gd = 4;
			break;
			case 5: gd = 5;
			break;
			case 6: gd = 6;
			break;
			case 7: gd = 7;
			break;
		}
		System.out.println("捞 催篮 " + gd +"龋 催涝聪促.");
	}

	@Override
	public void getName()
	{
		System.out.println("部部措咀~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	@Override
	public int getWeight()
	{
		
		return weight;
	}
	
}

class YongdusanPigeon implements Pigeon
{

	int weight;
	
	public YongdusanPigeon(int weight) 
	{
		this.weight = weight;
	}
	
	@Override
	public void getName()
	{
		System.out.println("备备备备备备");
		
	}

	@Override
	public int getWeight()
	{
		return weight;
	}
	
}

class ChickenFactory
{
	public void makeMeat(Chicken c)
	{
		c.getMeat();
		c.getName();
	}
}

public class Main
{

	public static void main(String[] args)
	{
		ChickenFactory cf = new ChickenFactory();
		KoreanChicken k = new KoreanChicken(45);
		cf.makeMeat(k);
	}

}
