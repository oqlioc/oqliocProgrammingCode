package test;

import java.io.PrintStream;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Random;

class Team {
	String name;
	int s, m, p;
	double sp;
	double sc1;
	double sc2;
	int count;

	public Team(String name, int count, int s, int m, int p, int sp, int sc1, int sc2) {
		this.name = name;
		this.count = count;
		this.s = s;
		this.m = m;
		this.p = p;
		this.sp = sp;
		this.sc1 = sc1;
	}

	public Team(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}

	public int getS() {
		return s;
	}

	public void setS(int s) {
		this.s = s;
	}

	public int getM() {
		return m;
	}

	public void setM(int m) {
		this.m = m;
	}

	public int getP() {
		return p;
	}

	public void setP(int p) {
		this.p = p;
	}

	public double getSp() {
		return sp;
	}

	public void setSp(double sp) {
		this.sp = sp;
	}

	public void setSc1(int sc1) {
		this.sc1 = sc1;
	}

	public int getSc2() {
		return sc2;
	}

	public void setSc2(int sc2) {
		this.sc2 = sc2;
	}

	@Override
	public String toString() {
		return "Team [name=" + name + ", s=" + s + ", m=" + m + ", p=" + p + ", sc1=" + sc1 + ", sc2=" + sc2
				+ ", count=" + count + ", sp=" + sp + "]";
	}

}

public class test3 {
	public static void main(String[] args) {
		LinkedList<Team> list = new LinkedList<>();
		Random random = new Random();

		list.add(new Team("LD"));
		list.add(new Team("SS"));
		list.add(new Team("HH"));
		list.add(new Team("LG"));

		for (int i = 0; i < list.size() - 1; i++) {
			for (int j = i + 1; j < list.size(); j++) {
				for (int k = 0; k < 10; k++) {
					int num = random.nextInt(3);
					if (num == 0) {
						list.get(i).s = list.get(i).s + 1;
						list.get(j).p = list.get(j).p + 1;

						list.get(i).count = list.get(i).count + 1;
						list.get(j).count = list.get(j).count + 1;
					} else if (num == 1) {
						list.get(i).m = list.get(i).m + 1;
						list.get(j).m = list.get(j).m + 1;

						list.get(i).count = list.get(i).count + 1;
						list.get(j).count = list.get(j).count + 1;
					} else {
						list.get(i).p = list.get(i).p + 1;
						list.get(j).s = list.get(j).s + 1;

						list.get(i).count = list.get(i).count + 1;
						list.get(j).count = list.get(j).count + 1;
					}
				}
			}
		}

		for (int i = 0; i < list.size(); i++) {
			list.get(i).sp = (double) list.get(i).s / (list.get(i).s + list.get(i).p); // 승률
		}

		Collections.sort(list, new Comparator<Team>() {
			@Override
			public int compare(Team o1, Team o2) { // 퀵정렬
				if (o1.sp < o2.sp) {
					return +1; // 양수의 대명사를 +1이라고 한다
				} else {
					return -1;
				}
			}
		});

		for (int i = 0; i < list.size(); i++) {
			list.get(i + 1).sc1 = list.get(i).s - list.get(i + 1).s + (list.get(i).m - list.get(i + 1).m) * 0.5;
		}

		for (Team item : list) {
			System.out.println(item.toString());
		}
	}
}
